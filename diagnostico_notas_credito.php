<?php

require_once 'vendor/autoload.php';

// Configurar Laravel
$app = require_once 'bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

use App\Models\Invoice;
use App\Services\SunatService;
use App\Services\QpsService;
use App\Models\AppSetting;
use App\Models\DocumentSeries;

echo "\n=== DIAGN√ìSTICO DE NOTAS DE CR√âDITO ===\n";
echo "Fecha: " . date('Y-m-d H:i:s') . "\n\n";

// 1. Verificar configuraci√≥n QPSE
echo "üìã 1. VERIFICANDO CONFIGURACI√ìN QPSE...\n";
try {
    // Verificar entorno
    $isProduction = \App\Models\AppSetting::getSetting('FacturacionElectronica', 'sunat_production') === '1';
    $environment = $isProduction ? 'production' : 'beta';
    
    // Obtener endpoint
    $endpoint = \App\Models\AppSetting::getQpseEndpointByEnvironmentFromFacturacion($environment);
    
    // Obtener credenciales
    $credentials = \App\Models\AppSetting::getQpseCredentialsFromFacturacion();
    
    echo "   ‚úÖ Configuraci√≥n QPSE encontrada:\n";
    echo "   - Entorno: {$environment}\n";
    echo "   - Endpoint: " . ($endpoint ?: 'N/A') . "\n";
    echo "   - Usuario: " . ($credentials['username'] ? '‚úì Configurado' : '‚úó No configurado') . "\n";
    echo "   - Contrase√±a: " . ($credentials['password'] ? '‚úì Configurada' : '‚úó No configurada') . "\n";
    
    if (empty($credentials['username'])) {
        throw new Exception('Usuario QPSE no configurado en FacturacionElectronica');
    }
    
    if (empty($credentials['password'])) {
        throw new Exception('Contrase√±a QPSE no configurada en FacturacionElectronica');
    }
    
    if (empty($endpoint)) {
        throw new Exception('Endpoint QPSE no configurado para entorno ' . $environment);
    }
    
    echo "   ‚úÖ Configuraci√≥n QPSE completa\n";
    
    // Probar conectividad si es posible
    try {
        $qpsService = new QpsService();
        if ($qpsService->isServiceAvailable()) {
            echo "   ‚úÖ Servicio QPSE disponible\n";
            
            // Probar autenticaci√≥n
            $token = $qpsService->getAccessToken();
            if ($token) {
                echo "   ‚úÖ Autenticaci√≥n QPSE exitosa\n";
            } else {
                echo "   ‚ùå Error en autenticaci√≥n QPSE\n";
            }
        } else {
            echo "   ‚ùå Servicio QPSE no disponible\n";
        }
    } catch (Exception $serviceException) {
        echo "   ‚ö†Ô∏è  No se pudo probar conectividad: " . $serviceException->getMessage() . "\n";
    }
    
} catch (Exception $e) {
    echo "   ‚ùå Error en configuraci√≥n QPSE: " . $e->getMessage() . "\n";
}

echo "\n";

// 2. Verificar series de notas de cr√©dito
echo "üìã 2. VERIFICANDO SERIES DE NOTAS DE CR√âDITO...\n";
try {
    $series = DocumentSeries::where('document_type', 'credit_note')
        ->where('active', true)
        ->first();
    
    if ($series) {
        echo "   ‚úÖ Serie activa encontrada:\n";
        echo "   - Serie: {$series->series}\n";
        echo "   - Pr√≥ximo n√∫mero: {$series->current_number}\n";
        echo "   - Prefijo: {$series->prefix}\n";
        echo "   - Sufijo: {$series->suffix}\n";
    } else {
        echo "   ‚ùå No hay series activas para notas de cr√©dito\n";
        echo "   üí° Soluci√≥n: Configure una serie desde el panel de administraci√≥n\n";
    }
    
} catch (Exception $e) {
    echo "   ‚ùå Error al verificar series: " . $e->getMessage() . "\n";
}

echo "\n";

// 3. Verificar configuraci√≥n de empresa
echo "üìã 3. VERIFICANDO CONFIGURACI√ìN DE EMPRESA...\n";
try {
    $ruc = AppSetting::getSetting('Empresa', 'ruc');
    $razonSocial = AppSetting::getSetting('Empresa', 'razon_social');
    $direccion = AppSetting::getSetting('Empresa', 'direccion');
    
    echo "   - RUC: " . ($ruc ?: 'NO CONFIGURADO') . "\n";
    echo "   - Raz√≥n Social: " . ($razonSocial ?: 'NO CONFIGURADA') . "\n";
    echo "   - Direcci√≥n: " . ($direccion ?: 'NO CONFIGURADA') . "\n";
    
    if ($ruc && $razonSocial && $direccion) {
        echo "   ‚úÖ Configuraci√≥n de empresa completa\n";
    } else {
        echo "   ‚ùå Configuraci√≥n de empresa incompleta\n";
    }
    
} catch (Exception $e) {
    echo "   ‚ùå Error al verificar empresa: " . $e->getMessage() . "\n";
}

echo "\n";

// 4. Buscar facturas para probar
echo "üìã 4. BUSCANDO FACTURAS PARA PRUEBA...\n";
try {
    $invoices = Invoice::where('sunat_status', 'ACEPTADO')
        ->whereDoesntHave('creditNotes')
        ->orderBy('id', 'desc')
        ->limit(3)
        ->get();
    
    if ($invoices->count() > 0) {
        echo "   ‚úÖ Facturas disponibles para prueba:\n";
        foreach ($invoices as $invoice) {
            echo "   - ID: {$invoice->id}, Serie: {$invoice->series}-{$invoice->number}, Total: S/ {$invoice->total}\n";
        }
        
        // Seleccionar la primera factura para prueba
        $testInvoice = $invoices->first();
        echo "\n   üß™ Probando con factura ID: {$testInvoice->id}\n";
        
    } else {
        echo "   ‚ùå No hay facturas aceptadas disponibles para prueba\n";
        $testInvoice = null;
    }
    
} catch (Exception $e) {
    echo "   ‚ùå Error al buscar facturas: " . $e->getMessage() . "\n";
    $testInvoice = null;
}

echo "\n";

// 5. Probar creaci√≥n de nota de cr√©dito
if ($testInvoice) {
    echo "üìã 5. PROBANDO CREACI√ìN DE NOTA DE CR√âDITO...\n";
    try {
        $sunatService = new SunatService();
        
        echo "   üîÑ Iniciando proceso de emisi√≥n...\n";
        $result = $sunatService->emitirNotaCredito(
            $testInvoice,
            '01',
            'PRUEBA DE DIAGN√ìSTICO - ANULACION DE LA OPERACION'
        );
        
        if ($result['success']) {
            $creditNote = $result['credit_note'];
            echo "   ‚úÖ Nota de cr√©dito creada exitosamente:\n";
            echo "   - ID: {$creditNote->id}\n";
            echo "   - Serie-N√∫mero: {$creditNote->series}-{$creditNote->number}\n";
            echo "   - Total: S/ {$creditNote->total}\n";
            echo "   - Estado SUNAT: {$creditNote->sunat_status}\n";
            echo "   - C√≥digo SUNAT: {$creditNote->sunat_code}\n";
            echo "   - Descripci√≥n: {$creditNote->sunat_description}\n";
            
            if ($creditNote->xml_path) {
                echo "   - XML: {$creditNote->xml_path}\n";
            }
            if ($creditNote->cdr_path) {
                echo "   - CDR: {$creditNote->cdr_path}\n";
            }
            
            // Verificar archivos
            if ($creditNote->xml_path && file_exists(storage_path('app/' . $creditNote->xml_path))) {
                echo "   ‚úÖ Archivo XML generado correctamente\n";
            } else {
                echo "   ‚ùå Archivo XML no encontrado\n";
            }
            
            if ($creditNote->cdr_path && file_exists(storage_path('app/' . $creditNote->cdr_path))) {
                echo "   ‚úÖ Archivo CDR generado correctamente\n";
            } else {
                echo "   ‚ö†Ô∏è  Archivo CDR no encontrado (normal si hay errores)\n";
            }
            
        } else {
            echo "   ‚ùå Error al crear nota de cr√©dito:\n";
            echo "   - Error: {$result['error']}\n";
        }
        
    } catch (Exception $e) {
        echo "   üí• Excepci√≥n capturada:\n";
        echo "   - Mensaje: {$e->getMessage()}\n";
        echo "   - Archivo: {$e->getFile()}\n";
        echo "   - L√≠nea: {$e->getLine()}\n";
    }
} else {
    echo "üìã 5. PRUEBA DE CREACI√ìN OMITIDA (no hay facturas disponibles)\n";
}

echo "\n";

// 6. Verificar logs
echo "üìã 6. VERIFICANDO LOGS...\n";
$logFiles = [
    'envionotacredito-' . date('Y-m-d') . '.log',
    'qps-' . date('Y-m-d') . '.log',
    'laravel-' . date('Y-m-d') . '.log'
];

foreach ($logFiles as $logFile) {
    $logPath = storage_path('logs/' . $logFile);
    if (file_exists($logPath)) {
        $size = filesize($logPath);
        echo "   ‚úÖ {$logFile}: " . number_format($size) . " bytes\n";
        
        // Mostrar √∫ltimas l√≠neas si hay errores
        $content = file_get_contents($logPath);
        if (strpos($content, 'ERROR') !== false || strpos($content, 'REJECTED') !== false) {
            echo "   ‚ö†Ô∏è  Contiene errores - revisar manualmente\n";
        }
    } else {
        echo "   ‚ùå {$logFile}: No encontrado\n";
    }
}

echo "\n";

// 7. Recomendaciones
echo "üìã 7. RECOMENDACIONES Y PR√ìXIMOS PASOS...\n";
echo "\nüîß Para solucionar problemas comunes:\n";
echo "   1. Verificar configuraci√≥n QPSE en el panel de administraci√≥n\n";
echo "   2. Asegurar que hay series activas para notas de cr√©dito\n";
echo "   3. Revisar logs detallados en storage/logs/\n";
echo "   4. Probar conectividad con: php artisan qpse:test-config\n";
echo "   5. Verificar certificados digitales\n";

echo "\nüìö Archivos de logs para revisar:\n";
foreach ($logFiles as $logFile) {
    echo "   - storage/logs/{$logFile}\n";
}

echo "\nüåê URLs importantes:\n";
echo "   - Panel de notas de cr√©dito: http://restaurante.test/admin/facturacion/notas-credito\n";
echo "   - Documentaci√≥n QPSE: https://docs.qpse.pe/\n";
echo "   - Configuraci√≥n: http://restaurante.test/admin/configuracion\n";

echo "\n=== FIN DEL DIAGN√ìSTICO ===\n";
echo "Revise los resultados y siga las recomendaciones para solucionar problemas.\n\n";